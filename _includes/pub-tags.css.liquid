/* Interactive tag filtering (pure CSS, no JS) */
.publist .pub { opacity: var(--dim, 1); transition: opacity 160ms ease; }
.publist:has(.tag[data-tag]:hover),
.publist:has(.tag[data-tag]:focus-visible) { --dim: .25; }

/* Auto-generated rules from site.data.publications */
{%- assign all = "" -%}
{%- for p in site.data.publications -%}
  {%- assign list = nil -%}
  {%- if p.keywords -%}
    {%- if p.keywords.first -%}
      {%- assign list = p.keywords -%}
    {%- elsif p.keywords contains "," -%}
      {%- assign list = p.keywords | split: "," -%}
    {%- else -%}
      {%- assign list = p.keywords | split: "|" -%}
    {%- endif -%}
    {%- for k in list -%}
      {%- assign t = k | strip -%}
      {%- assign s = t | downcase
        | replace: " ", "-"
        | replace: ".", ""
        | replace: ",", ""
        | replace: "â€™", ""
        | replace: "'", "" -%}
      {%- unless all contains s -%}
        {%- assign all = all | append: s | append: "," -%}
      {%- endunless -%}
    {%- endfor -%}
  {%- endif -%}
{%- endfor -%}
{%- assign slugs = all | split: "," | uniq -%}
{%- for s in slugs -%}
  {%- if s != "" -%}
.publist:has(.tag[data-tag="{{ s }}"]:hover) .pub.tag-{{ s }},
.publist:has(.tag[data-tag="{{ s }}"]:focus-visible) .pub.tag-{{ s }} { opacity: 1; }
  {%- endif -%}
{%- endfor -%}

/* ---------- Global hover preview (all lists) ---------- */
body:has(.tag[data-tag]:hover),
body:has(.tag[data-tag]:focus-visible) { --dim: .25; }
.pub { opacity: var(--dim, 1); transition: opacity 160ms ease; }

/* Keep matches opaque while hovering any tag anywhere */
{%- for s in slugs -%}
  {%- if s != "" -%}
body:has(.tag[data-tag="{{ s }}"]:hover) .pub.tag-{{ s }},
body:has(.tag[data-tag="{{ s }}"]:focus-visible) .pub.tag-{{ s }} { opacity: 1; }
  {%- endif -%}
{%- endfor -%}

/* ---------- Click-to-lock (global, across all lists) ---------- */
[data-pubfilter] { --dim: .25; }
{%- for s in slugs -%}
  {%- if s != "" -%}
[data-pubfilter="{{ s }}"] .pub.tag-{{ s }} { opacity: 1; }
  {%- endif -%}
{%- endfor -%}

/* Optional: pressed state */
.tag[aria-pressed="true"] {
  outline: 2px solid currentColor;
  outline-offset: 2px;
}

